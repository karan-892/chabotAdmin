generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String         @db.VarChar(255)
  email         String         @unique @db.VarChar(255)
  image         String?
  createdAt     DateTime?      @default(now()) @db.Timestamp(6)
  updatedAt     DateTime?      @updatedAt @db.Timestamp(6)
  bots          Bot[]
  conversations Conversation[]

  @@map("users")
}

model Bot {
  id                 String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String          @db.VarChar(255)
  description        String?
  avatar             String?         @db.VarChar(500)
  status             BotStatus       @default(DRAFT)
  isPublic           Boolean         @default(false)
  config             Json            @default("{}")
  flows              Json            @default("[]")
  intents            Json            @default("[]")
  entities           Json            @default("[]")
  deploymentUrl      String?         @db.VarChar(500)
  apiKey             String?         @db.VarChar(255)
  totalConversations Int             @default(0)
  totalMessages      Int             @default(0)
  userId             String          @db.Uuid
  createdAt          DateTime        @default(now()) @db.Timestamp(6)
  updatedAt          DateTime        @updatedAt @db.Timestamp(6)
  analytics          BotAnalytics[]
  user               User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations      Conversation[]
  knowledgeBase      KnowledgeBase[]
  theme              BotTheme?

  @@map("bots")
}

model BotTheme {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  botId           String   @unique @db.Uuid
  primaryColor    String   @default("#0ea5e9") @db.VarChar(7)
  secondaryColor  String   @default("#64748b") @db.VarChar(7)
  backgroundColor String   @default("#ffffff") @db.VarChar(7)
  textColor       String   @default("#1e293b") @db.VarChar(7)
  fontFamily      String   @default("Inter") @db.VarChar(100)
  fontSize        String   @default("14px") @db.VarChar(10)
  borderRadius    String   @default("8px") @db.VarChar(10)
  chatPosition    String   @default("bottom-right") @db.VarChar(20)
  chatWidth       String   @default("400px") @db.VarChar(10)
  chatHeight      String   @default("600px") @db.VarChar(10)
  headerStyle     Json     @default("{}")
  messageStyle    Json     @default("{}")
  inputStyle      Json     @default("{}")
  customCSS       String?  @db.Text
  createdAt       DateTime @default(now()) @db.Timestamp(6)
  updatedAt       DateTime @updatedAt @db.Timestamp(6)
  bot             Bot      @relation(fields: [botId], references: [id], onDelete: Cascade)

  @@map("bot_themes")
}

model KnowledgeBase {
  id          String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  botId       String            @db.Uuid
  title       String            @db.VarChar(255)
  content     String            @db.Text
  type        KnowledgeType
  sourceUrl   String?           @db.VarChar(500)
  filePath    String?           @db.VarChar(500)
  fileSize    Int?
  mimeType    String?           @db.VarChar(100)
  status      ProcessingStatus  @default(PENDING)
  metadata    Json?             @default("{}")
  vectorData  String?           @db.Text
  chunks      Json?             @default("[]")
  createdAt   DateTime          @default(now()) @db.Timestamp(6)
  updatedAt   DateTime          @updatedAt @db.Timestamp(6)
  bot         Bot               @relation(fields: [botId], references: [id], onDelete: Cascade)

  @@map("knowledge_base")
}

model Conversation {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionId String   @db.VarChar(255)
  userId    String?  @db.Uuid
  botId     String   @db.Uuid
  messages  Json     @default("[]")
  context   Json     @default("{}")
  metadata  Json     @default("{}")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)
  bot       Bot      @relation(fields: [botId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id])

  @@index([botId, sessionId])
  @@map("conversations")
}

model BotAnalytics {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  botId         String   @db.Uuid
  date          DateTime @db.Date
  conversations Int      @default(0)
  messages      Int      @default(0)
  uniqueUsers   Int      @default(0)
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  bot           Bot      @relation(fields: [botId], references: [id], onDelete: Cascade)

  @@unique([botId, date])
  @@map("bot_analytics")
}

enum BotStatus {
  DRAFT
  PUBLISHED
  DEPLOYED
  ARCHIVED
}

enum KnowledgeType {
  URL
  TEXT
  FILE
  PDF
  DOCX
  TXT
  CSV
  JSON
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  INDEXED
}